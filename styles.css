@font-face {
  font-family: 'Shorai';
  src: url('fonts/ShoraiSansDemi-8015162.ttf') format('ttf');
  font-weight: demi;
  font-style: normal;
}

@font-face {
  font-family: 'Shorai';
  src: url('fonts/ShoraiSansMedium-8015179.ttf') format('ttf');
  font-weight: medium;
  font-style: normal;
}

:root {
  --padding: 50px;
  --btnPadSm: 10px 16px;
  --fontSm: .75em;
}

body {
  margin: 0;
  width: 100vw;
  height: 100vh;
  min-height: 666px;
  padding-top: 20px;
  font-family: 'Shorai', sans-serif;
  font-weight: demi;
  font-size: 14pt;
  background: #8BEB83;
  color: #fff;
  text-align: center;
  transition: background 0.5s ease;
  overflow: hidden;
}

button {
  font-size: 14pt;
}


#bg1,
#bg2 {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  z-index: -1;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center;
}

#bg1 {
  background-image: url('assets/bg1.png');
  mix-blend-mode: soft-light;
  opacity: .54;
}

#bg2 {
  background-image: url('assets/bg2.png');
  mix-blend-mode: exclusion;
  opacity: .12;
}

.active {
  background-color: white;
  border-radius: .5em;
  color: black;
  font-weight: bold;
}


/* ////////////////////////////// */
/*       Modes and Key Menu       */
/* ////////////////////////////// */


/* Just the Frame around the filters */
.controls {
  position: fixed;
  left: 0;
  right: 0;
  top: 0;
  z-index: 1000;
  width: 100vw;
  height: 100vh;

  display: flex;
  /* keep it rendered */
  flex-direction: column;
  gap: 3rem;
  align-items: center;
  /* padding: 3em 0; */
  justify-content: center;

  transform: translateY(-100%);
  /* hidden above */
  transition: transform .4s ease;
  will-change: transform;

  background-color: rgba(0, 0, 0, .25);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(15px);

  /* keeps it out of focus order when closed, but doesn't kill animation */
  visibility: hidden;
}

.controls.is-open {
  transform: translateY(0);
  visibility: visible;
}

/* IMPORTANT: kill this rule if you have it anywhere:
   .controls.show { display: flex; }
   You already have display:flex on .controls, so this class just causes instant hide/show bugs. */

#closeControls {
  background: black;
  border: none;
  padding: 10px 20px;
  border-radius: .5em;
  color: white;
  cursor: pointer;
  /* width: 25vw; */
  margin-top: 25px;
  position: absolute;
  bottom: var(--padding);
}

.controls.show {
  display: flex;
}

#mode-select, #key-select {
  display: flex;
  flex-wrap: wrap;
  gap: .125em;
  justify-content: center;
  padding: 20px;
}

.mode-button {
  cursor: pointer;
  padding: var(--btnPadSm);
  flex: 0 0 auto;
}

.key-button {
  cursor: pointer;
  padding: var(--btnPadSm);
  width: 30px;
}

.key-button:hover,
.mode-button:hover,
.scale-note:hover {
  background-color: rgba(255, 255, 255, 0.2);
  border-radius: .5em;
}

/* /////////////////////////////////// */
/*       Modes and Key Menu Ends       */
/* /////////////////////////////////// */
/* /////////////////////////////////// */
/*                Header               */
/* /////////////////////////////////// */

#header {
  position: fixed;
  width: 100%;
  top: var(--padding);
  display: grid;
  grid-template-columns: 1fr auto 1fr;
  align-items: first baseline;
  gap: 1rem;
}

#active_mode-key {
  cursor: pointer;
}

.label {
  font-size: var(--fontSm);
  text-decoration: underline;
  text-underline-offset: 7px;
  margin-bottom: 13px;
  font-weight: medium;
}

#scale-display,
#roman-display {
  display: grid;
  grid-template-columns: repeat(7, 1fr);
  gap: 0.5rem;
  justify-items: center;
  text-align: center;
}

#scale-display {
  margin-bottom: .5em;

}

.scale-note,
.roman-display span {
  text-align: center;
  width: 25px;

}

span.scale-note,
#active_mode-key,
#active_chord {
  pointer-events: auto;
  ;
  min-width: 1em;
  min-height: 1em;

  padding: 10px;
}

span.scale-note,
#active_mode-key {
  cursor: pointer !important;
}

.active_chord {
  display: none;
}

.active_chord.show {
  display: block;
  /* or flex/grid depending on layout */
}

/* /////////////////////////////////////// */
/*               Header Ends               */
/* /////////////////////////////////////// */
/* //////////////////////////////////////// */
/*               Piano Starts               */
/* //////////////////////////////////////// */

#pianoSvg {
  height: 50vh;
  width: 100%;
  display: block;
}

#pianoSvg .white-keys image,
#pianoSvg .black-keys image {
  opacity: 0.15;
  transition: opacity 1s ease;
}

#pianoSvg image.scale-highlight {
  opacity: 1;
}

#pianoSvg image.chord-highlight {
  opacity: 1;
}

#pianoSvg image:not(.scale-highlight):not(.chord-highlight) {
  opacity: 0.15;
}

#pianoSvg {
  height: auto;
  width: auto;
  display: block;
}

#pianoSvgContainer {
  height: auto;
  width: 100%;
  overflow-x: hidden;
  position: absolute;
  top: 50%;
  transform: translateY(-50%)
}

/* ////////////////////////////////////// */
/*               Piano Ends               */
/* ////////////////////////////////////// */
/* /////////////////////////////////////// */
/*            Chords Inversions            */
/* /////////////////////////////////////// */

/* =========================
   Footer + Chord UI (clean)
   ========================= */

/* Footer layout */
#footer {
  position: fixed;
  bottom: var(--padding);
  left: 0;
  right: 0;
  display: grid;
  justify-items: center;
  align-content: center;
  gap: .75rem;
  padding-inline: 16px;
}

/* Chord notes visibility */
#chord-notes {
  display: none;
}

#chord-notes.show {
  display: flex;
  gap: 2em;
  padding: var(--btnPadSm); /* bottom padding only */
  flex-direction: row;
  align-items: center;
  justify-content: center;
  width: max-content;
}

/* Inversions container + states */
.inversions {
  display: none;
}

.inversions.show {
  display: inline-flex;
  gap: 1em;
  flex-direction: row;
  align-items: center;
  justify-content: center;
  width: max-content;
  margin: 0 auto;
  padding: 6px;
  border-radius: var(--radius-mode-buttons, 12px);
  background: var(--colors-transparency-black-trans-5, rgba(0, 0, 0, 0.05));
}

.inversions [data-inversion].active {
  outline: 2px solid currentColor;
}

/* Inversion buttons */
.inversions button {
  appearance: none;
  border: 0;
  background: none;
  display: flex;
  gap: 2em;
  padding: 8px 16px;
  align-items: center;
  border-radius: var(--radius-mode-buttons, 12px);
  cursor: pointer;
  color: var(--Colors-White, #FFF);
  text-transform: capitalize;
}

.inversions button:hover {
  background: rgba(255, 255, 255, 0.2);
}

/* Segmented control */
.segmented {
  display: inline-flex;
  overflow: hidden;
  width: max-content;
  margin: 0 auto;
}

.segmented .segment {
  border: 0;
  background: none;
  padding: var(--btnPadSm);
  font: inherit;
  cursor: pointer;
  flex: 1 1 0;
  white-space: nowrap;
  border-radius: 0;
  color: white;
  opacity: .5;
  font-size: var(--fontSm);

}

.segmented .segment.active {
  text-decoration: underline;
  text-underline-offset: 7px;
  opacity: 1;
}

/* Toggle (JS sets display none/'' already) */
#footer .chord-type-toggle {
  display: inline-flex;
  vertical-align: middle;
  margin: 0 auto;
  width: max-content;
}

.inv-btn {
  font-size: var(--fontSm);
}

/* .inversions.show is already inline-flex from Step 1 */
/* //////////////////////////////////////// */
/*          Chords Inversions Ends          */
/* //////////////////////////////////////// */


.scale-highlight,
.chord-highlight {
  transition: all 3s ease;
}

button, .segment, .inv-btn {
  -webkit-tap-highlight-color: transparent; /* removes the flash */
}

button:focus {
  outline: none;
}